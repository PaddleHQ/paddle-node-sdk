/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { SimulationRunEvent, SimulationRunEventCollection } from '../../entities/index.js';
import { type ISimulationRunEventResponse } from '../../types/index.js';
import { type ErrorResponse, type Response } from '../../internal/index.js';
import { BaseResource, PathParameters, QueryParameters } from '../../internal/base/index.js';
import type { ListSimulationRunEventsQueryParameters } from './operations/index.js';

export * from './operations/index.js';

const SimulationRunEventPaths = {
  list: '/simulations/{simulation_id}/runs/{simulation_run_id}/events',
  get: '/simulations/{simulation_id}/runs/{simulation_run_id}/events/{simulation_event_id}',
  replay: '/simulations/{simulation_id}/runs/{simulation_run_id}/events/{simulation_event_id}/replay',
} as const;

export class SimulationRunEventsResource extends BaseResource {
  public list(
    simulationId: string,
    simulationRunId: string,
    queryParams?: ListSimulationRunEventsQueryParameters,
  ): SimulationRunEventCollection {
    const queryParameters = new QueryParameters(queryParams);
    const urlWithPathParams = new PathParameters(SimulationRunEventPaths.list, {
      simulation_id: simulationId,
      simulation_run_id: simulationRunId,
    }).deriveUrl();

    return new SimulationRunEventCollection(this.client, urlWithPathParams + queryParameters.toQueryString());
  }

  public async get(
    simulationId: string,
    simulationRunId: string,
    simulationEventId: string,
  ): Promise<SimulationRunEvent> {
    const urlWithPathParams = new PathParameters(SimulationRunEventPaths.get, {
      simulation_id: simulationId,
      simulation_run_id: simulationRunId,
      simulation_event_id: simulationEventId,
    }).deriveUrl();

    const response = await this.client.get<undefined, Response<ISimulationRunEventResponse> | ErrorResponse>(
      urlWithPathParams,
    );

    const data = this.handleResponse<ISimulationRunEventResponse>(response);

    return new SimulationRunEvent(data);
  }

  public async replay(
    simulationId: string,
    simulationRunId: string,
    simulationEventId: string,
  ): Promise<SimulationRunEvent> {
    const urlWithPathParams = new PathParameters(SimulationRunEventPaths.replay, {
      simulation_id: simulationId,
      simulation_run_id: simulationRunId,
      simulation_event_id: simulationEventId,
    }).deriveUrl();

    const response = await this.client.post<undefined, Response<ISimulationRunEventResponse> | ErrorResponse>(
      urlWithPathParams,
      undefined,
    );

    const data = this.handleResponse<ISimulationRunEventResponse>(response);

    return new SimulationRunEvent(data);
  }
}
