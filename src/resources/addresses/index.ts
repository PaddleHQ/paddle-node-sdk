/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { BaseResource, PathParameters, QueryParameters } from '../../internal/base/index.js';
import {
  type CreateAddressRequestBody,
  type ListAddressQueryParameters,
  type UpdateAddressRequestBody,
} from './operations/index.js';
import { Address, AddressCollection } from '../../entities/index.js';
import { type IAddressResponse } from '../../types/index.js';
import { type Response, type ErrorResponse } from '../../internal/index.js';

const AddressPaths = {
  list: '/customers/{customer_id}/addresses',
  create: '/customers/{customer_id}/addresses',
  get: '/customers/{customer_id}/addresses/{address_id}',
  update: '/customers/{customer_id}/addresses/{address_id}',
} as const;

export * from './operations/index.js';

export class AddressesResource extends BaseResource {
  public list(customerId: string, queryParams?: ListAddressQueryParameters): AddressCollection {
    const queryParameters = new QueryParameters(queryParams);

    const urlWithPathParams = new PathParameters(AddressPaths.list, {
      customer_id: customerId,
    }).deriveUrl();

    return new AddressCollection(this.client, urlWithPathParams + queryParameters.toQueryString());
  }

  public async create(customerId: string, createAddressParameters: CreateAddressRequestBody): Promise<Address> {
    const urlWithPathParams = new PathParameters(AddressPaths.create, {
      customer_id: customerId,
    }).deriveUrl();

    const response = await this.client.post<CreateAddressRequestBody, Response<IAddressResponse> | ErrorResponse>(
      urlWithPathParams,
      createAddressParameters,
    );
    const data = this.handleResponse<IAddressResponse>(response);

    return new Address(data);
  }

  public async get(customerId: string, addressId: string): Promise<Address> {
    const urlWithPathParams = new PathParameters(AddressPaths.get, {
      customer_id: customerId,
      address_id: addressId,
    }).deriveUrl();

    const response = await this.client.get<undefined, Response<IAddressResponse> | ErrorResponse>(urlWithPathParams);

    const data = this.handleResponse<IAddressResponse>(response);

    return new Address(data);
  }

  public async update(
    customerId: string,
    addressId: string,
    updateAddress: UpdateAddressRequestBody,
  ): Promise<Address> {
    const urlWithPathParams = new PathParameters(AddressPaths.update, {
      customer_id: customerId,
      address_id: addressId,
    }).deriveUrl();

    const response = await this.client.patch<UpdateAddressRequestBody, Response<IAddressResponse> | ErrorResponse>(
      urlWithPathParams,
      updateAddress,
    );

    const data = this.handleResponse<IAddressResponse>(response);

    return new Address(data);
  }

  public async archive(customerId: string, addressId: string) {
    return await this.update(customerId, addressId, { status: 'archived' });
  }
}
