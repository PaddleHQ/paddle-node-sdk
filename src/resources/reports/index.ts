/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { BaseResource, PathParameters, QueryParameters } from '../../internal/base/index.js';
import { type CreateReportRequestBody, type ListReportQueryParameters } from './operations/index.js';
import { Report, ReportCollection, ReportCsv } from '../../entities/index.js';
import { type IReportCsvResponse, type IReportResponse } from '../../types/index.js';
import { type ErrorResponse, type Response } from '../../internal/index.js';

const ReportPaths = {
  list: '/reports',
  create: '/reports',
  get: '/reports/{report_id}',
  getReportCsv: '/reports/{report_id}/download-url',
} as const;

export * from './operations/index.js';

export class ReportsResource extends BaseResource {
  public list(queryParams?: ListReportQueryParameters): ReportCollection {
    const queryParameters = new QueryParameters(queryParams);
    return new ReportCollection(this.client, ReportPaths.list + queryParameters.toQueryString());
  }

  public async create(createReportParameters: CreateReportRequestBody): Promise<Report> {
    const response = await this.client.post<CreateReportRequestBody, Response<IReportResponse> | ErrorResponse>(
      ReportPaths.create,
      createReportParameters,
    );

    const data = this.handleResponse<IReportResponse>(response);

    return new Report(data);
  }

  public async get(reportId: string): Promise<Report> {
    const urlWithPathParams = new PathParameters(ReportPaths.get, {
      report_id: reportId,
    }).deriveUrl();

    const response = await this.client.get<undefined, Response<IReportResponse> | ErrorResponse>(urlWithPathParams);

    const data = this.handleResponse<IReportResponse>(response);

    return new Report(data);
  }

  public async getReportCsv(reportId: string): Promise<ReportCsv> {
    const urlWithPathParams = new PathParameters(ReportPaths.getReportCsv, {
      report_id: reportId,
    }).deriveUrl();

    const response = await this.client.get<undefined, Response<IReportCsvResponse> | ErrorResponse>(urlWithPathParams);

    const data = this.handleResponse<IReportCsvResponse>(response);

    return new ReportCsv(data);
  }
}
