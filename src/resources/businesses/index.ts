/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { BaseResource, PathParameters, QueryParameters } from '../../internal/base/index.js';
import {
  type CreateBusinessRequestBody,
  type ListBusinessQueryParameters,
  type UpdateBusinessRequestBody,
} from './operations/index.js';
import { Business, BusinessCollection } from '../../entities/index.js';
import { type IBusinessResponse } from '../../types/index.js';
import { type Response, type ErrorResponse } from '../../internal/index.js';

const BusinessPaths = {
  list: '/customers/{customer_id}/businesses',
  create: '/customers/{customer_id}/businesses',
  get: '/customers/{customer_id}/businesses/{business_id}',
  update: '/customers/{customer_id}/businesses/{business_id}',
} as const;

export * from './operations/index.js';

export class BusinessesResource extends BaseResource {
  public list(customerId: string, queryParams?: ListBusinessQueryParameters): BusinessCollection {
    const queryParameters = new QueryParameters(queryParams);
    const urlWithPathParams = new PathParameters(BusinessPaths.list, {
      customer_id: customerId,
    }).deriveUrl();

    return new BusinessCollection(this.client, urlWithPathParams + queryParameters.toQueryString());
  }

  public async create(customerId: string, createBusinessParameters: CreateBusinessRequestBody): Promise<Business> {
    const urlWithPathParams = new PathParameters(BusinessPaths.create, {
      customer_id: customerId,
    }).deriveUrl();
    const response = await this.client.post<CreateBusinessRequestBody, Response<IBusinessResponse> | ErrorResponse>(
      urlWithPathParams,
      createBusinessParameters,
    );

    const data = this.handleResponse<IBusinessResponse>(response);

    return new Business(data);
  }

  public async get(customerId: string, businessId: string): Promise<Business> {
    const urlWithPathParams = new PathParameters(BusinessPaths.get, {
      customer_id: customerId,
      business_id: businessId,
    }).deriveUrl();

    const response = await this.client.get<undefined, Response<IBusinessResponse> | ErrorResponse>(urlWithPathParams);

    const data = this.handleResponse<IBusinessResponse>(response);

    return new Business(data);
  }

  public async update(
    customerId: string,
    businessId: string,
    updateBusiness: UpdateBusinessRequestBody,
  ): Promise<Business> {
    const urlWithPathParams = new PathParameters(BusinessPaths.update, {
      customer_id: customerId,
      business_id: businessId,
    }).deriveUrl();

    const response = await this.client.patch<UpdateBusinessRequestBody, Response<IBusinessResponse> | ErrorResponse>(
      urlWithPathParams,
      updateBusiness,
    );

    const data = this.handleResponse<IBusinessResponse>(response);

    return new Business(data);
  }

  public async archive(customerId: string, addressId: string) {
    return await this.update(customerId, addressId, { status: 'archived' });
  }
}
