/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { BaseResource, PathParameters, QueryParameters } from '../../internal/base/index.js';
import {
  type CreatePriceRequestBody,
  type GetPriceQueryParameters,
  type ListPriceQueryParameters,
  type UpdatePriceRequestBody,
} from './operations/index.js';
import { Price, PriceCollection } from '../../entities/index.js';
import { type IPriceResponse } from '../../types/index.js';
import { type Response, type ErrorResponse } from '../../internal/index.js';

const PricePaths = {
  list: '/prices',
  create: '/prices',
  get: '/prices/{price_id}',
  update: '/prices/{price_id}',
} as const;

export * from './operations/index.js';

export class PricesResource extends BaseResource {
  public list(queryParams?: ListPriceQueryParameters): PriceCollection {
    const queryParameters = new QueryParameters(queryParams);
    return new PriceCollection(this.client, PricePaths.list + queryParameters.toQueryString());
  }

  public async create(createPriceParameters: CreatePriceRequestBody): Promise<Price> {
    const response = await this.client.post<CreatePriceRequestBody, Response<IPriceResponse> | ErrorResponse>(
      PricePaths.create,
      createPriceParameters,
    );

    const data = this.handleResponse<IPriceResponse>(response);

    return new Price(data);
  }

  public async get(priceId: string, queryParams?: GetPriceQueryParameters): Promise<Price> {
    const queryParameters = new QueryParameters(queryParams);

    const urlWithPathParams = new PathParameters(PricePaths.get, {
      price_id: priceId,
    }).deriveUrl();

    const response = await this.client.get<
      GetPriceQueryParameters | undefined,
      Response<IPriceResponse> | ErrorResponse
    >(urlWithPathParams, queryParameters);

    const data = this.handleResponse<IPriceResponse>(response);

    return new Price(data);
  }

  public async update(priceId: string, updatePrice: UpdatePriceRequestBody): Promise<Price> {
    const urlWithPathParams = new PathParameters(PricePaths.update, {
      price_id: priceId,
    }).deriveUrl();

    const response = await this.client.patch<UpdatePriceRequestBody, Response<IPriceResponse> | ErrorResponse>(
      urlWithPathParams,
      updatePrice,
    );

    const data = this.handleResponse<IPriceResponse>(response);

    return new Price(data);
  }

  public async archive(priceId: string) {
    return await this.update(priceId, { status: 'archived' });
  }
}
