/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import {
  SimulationRunsResource,
  type ListSimulationRunQueryParameters,
  type GetSimulationRunQueryParameters,
} from '../../resources/index.js';
import { getPaddleTestClient } from '../helpers/test-client.js';
import {
  SimulationRunMockResponse,
  SimulationRunMock,
  ListSimulationRunMockResponse,
} from '../mocks/resources/simulation-runs.mock.js';
import { QueryParameters } from '../../internal/base/index.js';

const simulationId = 'ntfsim_123';

describe('SimulationRunsResource', () => {
  test('should return a list of simulationRuns', async () => {
    const paddleInstance = getPaddleTestClient();
    paddleInstance.get = jest.fn().mockResolvedValue(ListSimulationRunMockResponse);

    const simulationRunsResource = new SimulationRunsResource(paddleInstance);
    const simulationRunCollection = simulationRunsResource.list(simulationId);

    let simulationRuns = await simulationRunCollection.next();
    expect(paddleInstance.get).toBeCalledWith(`/simulations/${simulationId}/runs?`);
    expect(simulationRuns.length).toBe(1);

    simulationRuns = await simulationRunCollection.next();
    expect(paddleInstance.get).toBeCalledWith(`/simulations/${simulationId}/runs?after=1`);
    expect(simulationRuns.length).toBe(1);
  });

  test('should accept query params and return a list of simulationRuns', async () => {
    const paddleInstance = getPaddleTestClient();
    paddleInstance.get = jest.fn().mockResolvedValue(ListSimulationRunMockResponse);
    const simulationRunsResource = new SimulationRunsResource(paddleInstance);
    const queryParams: ListSimulationRunQueryParameters = {
      after: '2',
      id: ['1234'],
      include: ['price'],
    };

    const simulationRunCollection = simulationRunsResource.list(simulationId, queryParams);
    const simulationRuns = await simulationRunCollection.next();

    expect(paddleInstance.get).toBeCalledWith(`/simulations/${simulationId}/runs?after=2&id=1234&include=price`);
    expect(simulationRuns.length).toBe(1);
  });

  test('should return a single simulationRun by ID', async () => {
    const simulationRunId = SimulationRunMock.id;
    const paddleInstance = getPaddleTestClient();
    paddleInstance.get = jest.fn().mockResolvedValue(SimulationRunMockResponse);

    const simulationRunsResource = new SimulationRunsResource(paddleInstance);
    const simulationRun = await simulationRunsResource.get(simulationId, simulationRunId);

    expect(paddleInstance.get).toBeCalledWith(`/simulations/${simulationId}/runs/${simulationRunId}`, {
      queryParams: undefined,
    });
    expect(simulationRun).toBeDefined();
    expect(simulationRun.id).toBe(simulationRunId);
  });

  test('should accepts query params and return a single simulationRun by ID', async () => {
    const simulationRunId = SimulationRunMock.id;
    const paddleInstance = getPaddleTestClient();

    paddleInstance.get = jest.fn().mockResolvedValue(SimulationRunMockResponse);
    const simulationRunsResource = new SimulationRunsResource(paddleInstance);

    const queryParams: GetSimulationRunQueryParameters = {
      include: ['price'],
    };
    const simulationRun = await simulationRunsResource.get(simulationId, simulationRunId, queryParams);

    expect(simulationRun).toBeDefined();
    expect(paddleInstance.get).toBeCalledWith(
      `/simulations/${simulationId}/runs/${simulationRunId}`,
      new QueryParameters(queryParams),
    );
    expect(simulationRun.id).toBe(simulationRunId);
  });

  test('should create a new simulationRun', async () => {
    const paddleInstance = getPaddleTestClient();

    paddleInstance.post = jest.fn().mockResolvedValue(SimulationRunMockResponse);
    const simulationRunsResource = new SimulationRunsResource(paddleInstance);
    const createdSimulationRun = await simulationRunsResource.create(simulationId);

    expect(createdSimulationRun).toBeDefined();
    expect(createdSimulationRun.id).toBeDefined();
  });
});
