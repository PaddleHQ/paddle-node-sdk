/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import {
  DiscountGroupMock,
  DiscountGroupMockResponse,
  ListDiscountGroupMockResponse,
} from '../mocks/resources/discount-groups.mock.js';
import { getPaddleTestClient } from '../helpers/test-client.js';
import {
  CreateDiscountGroupRequestBody,
  DiscountGroupsResource,
  ListDiscountGroupQueryParameters,
} from '../../resources/index.js';

describe('DiscountGroupsResource', () => {
  test('should return a list of discountGroups', async () => {
    const paddleInstance = getPaddleTestClient();
    paddleInstance.get = jest.fn().mockResolvedValue(ListDiscountGroupMockResponse);

    const discountGroupsResource = new DiscountGroupsResource(paddleInstance);
    const discountGroupCollection = discountGroupsResource.list();

    let discountGroups = await discountGroupCollection.next();
    expect(paddleInstance.get).toHaveBeenCalledWith('/discount-groups?');
    expect(discountGroups.length).toBe(1);

    discountGroups = await discountGroupCollection.next();
    expect(paddleInstance.get).toHaveBeenCalledWith('/discount-groups?after=1');
    expect(discountGroups.length).toBe(1);
  });

  test('should accept query params and return a list of discountGroups', async () => {
    const paddleInstance = getPaddleTestClient();
    paddleInstance.get = jest.fn().mockResolvedValue(ListDiscountGroupMockResponse);
    const discountGroupsResource = new DiscountGroupsResource(paddleInstance);
    const queryParams: ListDiscountGroupQueryParameters = {
      after: '2',
      id: ['1234'],
    };

    const discountGroupCollection = discountGroupsResource.list(queryParams);
    const discountGroups = await discountGroupCollection.next();

    expect(paddleInstance.get).toHaveBeenCalledWith('/discount-groups?after=2&id=1234');
    expect(discountGroups.length).toBe(1);
  });

  test('should create a new discountGroup', async () => {
    const newDiscountGroup: CreateDiscountGroupRequestBody = DiscountGroupMock;
    const paddleInstance = getPaddleTestClient();

    paddleInstance.post = jest.fn().mockResolvedValue(DiscountGroupMockResponse);
    const discountGroupsResource = new DiscountGroupsResource(paddleInstance);
    const createdDiscountGroup = await discountGroupsResource.create(newDiscountGroup);

    expect(paddleInstance.post).toHaveBeenCalledWith(`/discount-groups`, newDiscountGroup);
    expect(createdDiscountGroup).toBeDefined();
    expect(createdDiscountGroup.id).toBeDefined();
    expect(createdDiscountGroup.name).toBe(newDiscountGroup.name);
  });
});
