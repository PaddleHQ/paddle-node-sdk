/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { getPaddleTestClient } from '../helpers/test-client.js';
import {
  ListReportMockResponse,
  ReportCsvMockResponse,
  ReportMock,
  ReportMockResponse,
} from '../mocks/resources/reports.mock.js';
import { CreateReportRequestBody, ListReportQueryParameters, ReportsResource } from '../../resources/index.js';

describe('ReportsResource', () => {
  test('should return a list of reports', async () => {
    const paddleInstance = getPaddleTestClient();
    paddleInstance.get = jest.fn().mockResolvedValue(ListReportMockResponse);

    const reportsResource = new ReportsResource(paddleInstance);
    const reportCollection = reportsResource.list();

    let reports = await reportCollection.next();
    expect(paddleInstance.get).toBeCalledWith('/reports?');
    expect(reports.length).toBe(1);

    reports = await reportCollection.next();
    expect(paddleInstance.get).toBeCalledWith('/reports?after=1');
    expect(reports.length).toBe(1);
  });

  test('should accept query params and return a list of reports', async () => {
    const paddleInstance = getPaddleTestClient();
    paddleInstance.get = jest.fn().mockResolvedValue(ListReportMockResponse);
    const reportsResource = new ReportsResource(paddleInstance);
    const queryParams: ListReportQueryParameters = {
      after: '2',
    };

    const reportCollection = reportsResource.list(queryParams);
    const reports = await reportCollection.next();

    expect(paddleInstance.get).toBeCalledWith('/reports?after=2');
    expect(reports.length).toBe(1);
  });

  test('should return a single report by ID', async () => {
    const reportId = ReportMock.id;
    const paddleInstance = getPaddleTestClient();
    paddleInstance.get = jest.fn().mockResolvedValue(ReportMockResponse);

    const reportsResource = new ReportsResource(paddleInstance);
    const report = await reportsResource.get(reportId);

    expect(paddleInstance.get).toBeCalledWith(`/reports/${reportId}`);
    expect(report).toBeDefined();
    expect(report.id).toBe(reportId);
  });

  test('should accepts query params and return a single report by ID', async () => {
    const reportId = ReportMock.id;
    const paddleInstance = getPaddleTestClient();

    paddleInstance.get = jest.fn().mockResolvedValue(ReportMockResponse);
    const reportsResource = new ReportsResource(paddleInstance);

    const report = await reportsResource.get(reportId);

    expect(report).toBeDefined();
    expect(paddleInstance.get).toBeCalledWith(`/reports/${reportId}`);
    expect(report.id).toBe(reportId);
  });

  test('should create a new report', async () => {
    const newReport: CreateReportRequestBody = ReportMock;
    const paddleInstance = getPaddleTestClient();

    paddleInstance.post = jest.fn().mockResolvedValue(ReportMockResponse);
    const reportsResource = new ReportsResource(paddleInstance);
    const createdReport = await reportsResource.create(newReport);

    expect(paddleInstance.post).toBeCalledWith(`/reports`, newReport);
    expect(createdReport).toBeDefined();
    expect(createdReport.id).toBeDefined();
  });

  test('should return a CSV link to download the report', async () => {
    const paddleInstance = getPaddleTestClient();

    paddleInstance.get = jest.fn().mockResolvedValue(ReportCsvMockResponse);
    const reportsResource = new ReportsResource(paddleInstance);
    const createdReport = await reportsResource.getReportCsv(ReportMock.id);

    expect(paddleInstance.get).toBeCalledWith(`/reports/${ReportMock.id}/download-url`);
    expect(createdReport).toBeDefined();
  });
});
