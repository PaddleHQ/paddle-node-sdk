/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { CreateAdjustmentRequestBody } from '../../../resources/index.js';
import { IAdjustmentResponse } from '../../../types/index.js';
import { Response, ResponsePaginated } from '../../../internal/index.js';

export const CreateAdjustmentMock: CreateAdjustmentRequestBody = {
  action: 'credit',
  items: [
    {
      itemId: 'txnitm_01gm302t81w94gyjpjpqypkzkf',
      type: 'full',
      amount: '1000',
    },
  ],
  reason: 'NO_VALUE',
  transactionId: 'txn_01h04vsbhqc62t8hmd4z3b578c',
};

export const CreateAdjustmentExpectation = {
  action: 'credit',
  items: [
    {
      item_id: 'txnitm_01gm302t81w94gyjpjpqypkzkf',
      type: 'full',
      amount: '1000',
    },
  ],
  reason: 'NO_VALUE',
  transaction_id: 'txn_01h04vsbhqc62t8hmd4z3b578c',
};

export const AdjustmentMock: IAdjustmentResponse = {
  action: 'credit',
  type: 'partial',
  items: [
    {
      amount: '1000',
      id: '1234',
      item_id: '1245',
      type: 'proration',
      totals: {
        subtotal: '1000',
        tax: '50',
        total: '1050',
      },
      proration: {
        billing_period: {
          starts_at: '2024-10-12T07:20:50.52Z',
          ends_at: '2024-11-12T07:20:50.52Z',
        },
        rate: '10',
      },
    },
  ],
  created_at: '2024-10-12T07:20:50.52Z',
  credit_applied_to_balance: false,
  currency_code: 'USD',
  customer_id: 'ctm_1234',
  id: 'adj_1234',
  reason: 'Refund',
  status: 'approved',
  transaction_id: 'txn_1234',
  updated_at: '2024-10-12T07:20:50.52Z',
  payout_totals: {
    currency_code: 'USD',
    earnings: '1',
    total: '1',
    fee: '1',
    subtotal: '1',
    tax: '1',
  },
  totals: {
    currency_code: 'USD',
    earnings: '1',
    total: '1',
    fee: '1',
    subtotal: '1',
    tax: '1',
  },
};

export const AdjustmentMockResponse: Response<IAdjustmentResponse> = {
  data: AdjustmentMock,
  meta: {
    request_id: '',
  },
};

export const ListAdjustmentMockResponse: ResponsePaginated<IAdjustmentResponse> = {
  data: [AdjustmentMock],
  meta: {
    request_id: '',
    pagination: {
      estimated_total: 10,
      has_more: true,
      next: '/adjustments?after=1',
      per_page: 10,
    },
  },
};
