/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { PricingPreviewRequestBody } from '../../../resources/index.js';
import { IPricingPreviewResponse } from '../../../types/index.js';
import { Response } from '../../../internal/index.js';

export const PricingPreviewRequest: PricingPreviewRequestBody = {
  currencyCode: 'USD',
  items: [
    {
      priceId: 'pri_1234',
      quantity: 1,
    },
  ],
};
export const PricingPreviewMock: IPricingPreviewResponse = {
  available_payment_methods: ['apple_pay'],
  currency_code: 'USD',
  address: {
    country_code: 'US',
    postal_code: 'CODE',
  },
  details: {
    line_items: [
      {
        discounts: [
          {
            discount: {
              id: 'dsc_01gv5kpg05xp104ek2fmgjwttf',
              status: 'active',
              description: 'sui consuasor deludo ver tendo qui deleo accendo censura vetus',
              enabled_for_checkout: true,
              code: 'ABCDEF',
              type: 'flat',
              amount: '1000',
              currency_code: 'USD',
              recur: true,
              maximum_recurring_intervals: 10,
              usage_limit: 10,
              restrict_to: [],
              expires_at: '2024-10-12T07:20:50.52Z',
              custom_data: { customer_reference_id: 'abcd1234' },
              times_used: 10,
              created_at: '2024-10-12T07:20:50.52Z',
              updated_at: '2024-10-13T07:20:50.52Z',
              import_meta: { external_id: '9b95b0b8-e10f-441a-862e-1936a6d818ab', imported_from: 'billing_platform' },
            },
            formatted_total: '$100',
            total: '10000',
          },
        ],
        price: {
          id: 'pri_01gsz8z1q1n00f12qt82y31smh',
          product_id: 'pro_01gsz97mq9pa4fkyy0wqenepkz',
          description: 'utor uredo varius tricesimus ago tricesimus adflicto certe assentator adulatio',
          type: 'custom',
          name: 'Shad',
          billing_cycle: { interval: 'day', frequency: 10 },
          trial_period: { interval: 'day', frequency: 10 },
          tax_mode: 'account_setting',
          unit_price: { amount: '1000', currency_code: 'USD' },
          unit_price_overrides: [
            {
              country_codes: ['GB'],
              unit_price: { amount: '1000', currency_code: 'USD' },
            },
          ],
          quantity: { minimum: 1, maximum: 100 },
          status: 'active',
          custom_data: { customer_reference_id: 'abcd1234' },
          import_meta: { external_id: '9b95b0b8-e10f-441a-862e-1936a6d818ab', imported_from: 'billing_platform' },
          created_at: '2024-10-12T07:20:50.52Z',
          updated_at: '2024-10-12T07:20:50.52Z',
        },
        formatted_totals: {
          discount: '£0',
          total: '£100',
          tax: '£10',
          subtotal: '£90',
        },
        formatted_unit_totals: {
          discount: '£0',
          total: '£100',
          tax: '£10',
          subtotal: '£90',
        },
        product: {
          id: 'pro_01gsz97mq9pa4fkyy0wqenepkz',
          name: 'Ezekiel',
          description: 'spargo crux videlicet fugit tyrannus curatio coma stillicidium esse bardus',
          type: 'custom',
          tax_category: 'digital-goods',
          image_url: 'https://loremflickr.com/640/480?lock=7909378724200448',
          custom_data: { customer_reference_id: 'abcd1234' },
          status: 'active',
          created_at: '2024-10-12T07:20:50.52Z',
          updated_at: '2024-10-12T07:20:50.52Z',
        },
        quantity: 10,
        tax_rate: '10',
        totals: {
          discount: '£0',
          total: '£100',
          tax: '£10',
          subtotal: '£90',
        },
        unit_totals: {
          discount: '£0',
          total: '£100',
          tax: '£10',
          subtotal: '£90',
        },
      },
    ],
  },
  items: [
    {
      price_id: 'pri_1234',
      quantity: 1,
    },
  ],
};

export const PricingPreviewMockResponse: Response<IPricingPreviewResponse> = {
  data: PricingPreviewMock,
  meta: {
    request_id: '',
  },
};
