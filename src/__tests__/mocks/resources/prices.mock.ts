/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import { CreatePriceRequestBody, UpdatePriceRequestBody } from '../../../resources/index.js';
import { IPriceResponse } from '../../../types/index.js';
import { Response, ResponsePaginated } from '../../../internal/index.js';

export const CreatePriceMock: CreatePriceRequestBody = {
  description: 'calculus acsi explicabo spargo vergo cur defluo laboriosam curvo aqua',
  productId: 'pro_01gsz97mq9pa4fkyy0wqenepkz',
  unitPrice: { amount: '1000', currencyCode: 'USD' },
};

export const UpdatePriceMock: UpdatePriceRequestBody = {
  description: 'vigor avaritia tergo thesaurus sumptus volo thorax combibo aliquam stultus',
  type: 'custom',
  name: 'Joshua',
  billingCycle: { interval: 'day', frequency: 10 },
  trialPeriod: { interval: 'day', frequency: 10 },
  taxMode: 'account_setting',
  unitPrice: { amount: '1000', currencyCode: 'USD' },
  unitPriceOverrides: [
    {
      countryCodes: ['GB'],
      unitPrice: { amount: '1000', currencyCode: 'USD' },
    },
  ],
  quantity: { minimum: 1, maximum: 100 },
  status: 'active',
  customData: { customer_reference_id: 'abcd1234' },
};

export const CreatePriceExpectation = {
  description: 'calculus acsi explicabo spargo vergo cur defluo laboriosam curvo aqua',
  product_id: 'pro_01gsz97mq9pa4fkyy0wqenepkz',
  unit_price: { amount: '1000', currency_code: 'USD' },
};

export const UpdatePriceExpectation = {
  description: 'vigor avaritia tergo thesaurus sumptus volo thorax combibo aliquam stultus',
  type: 'custom',
  name: 'Joshua',
  billing_cycle: { interval: 'day', frequency: 10 },
  trial_period: { interval: 'day', frequency: 10 },
  tax_mode: 'account_setting',
  unit_price: { amount: '1000', currency_code: 'USD' },
  unit_price_overrides: [
    {
      country_codes: ['GB'],
      unit_price: { amount: '1000', currency_code: 'USD' },
    },
  ],
  quantity: { minimum: 1, maximum: 100 },
  status: 'active',
  custom_data: { customer_reference_id: 'abcd1234' },
};

export const PriceMock: IPriceResponse = {
  id: 'pri_01gsz8z1q1n00f12qt82y31smh',
  product_id: 'pro_01gsz97mq9pa4fkyy0wqenepkz',
  description: 'utor uredo varius tricesimus ago tricesimus adflicto certe assentator adulatio',
  type: 'custom',
  name: 'Shad',
  billing_cycle: { interval: 'day', frequency: 10 },
  trial_period: { interval: 'day', frequency: 10 },
  tax_mode: 'account_setting',
  unit_price: { amount: '1000', currency_code: 'USD' },
  unit_price_overrides: [
    {
      country_codes: ['GB'],
      unit_price: { amount: '1000', currency_code: 'USD' },
    },
  ],
  quantity: { minimum: 1, maximum: 100 },
  status: 'active',
  custom_data: { customer_reference_id: 'abcd1234' },
  import_meta: { external_id: '9b95b0b8-e10f-441a-862e-1936a6d818ab', imported_from: 'billing_platform' },
  created_at: '2024-10-12T07:20:50.52Z',
  updated_at: '2024-10-12T07:20:50.52Z',
};

export const PriceMockResponse: Response<IPriceResponse> = {
  data: PriceMock,
  meta: {
    request_id: '',
  },
};

export const ListPriceMockResponse: ResponsePaginated<IPriceResponse> = {
  data: [PriceMock],
  meta: {
    request_id: '',
    pagination: {
      estimated_total: 10,
      has_more: true,
      next: '/prices?after=1',
      per_page: 10,
    },
  },
};
