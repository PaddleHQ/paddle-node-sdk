/**
 *  ! Autogenerated code !
 *  Do not make changes to this file.
 *  Changes may be overwritten as part of auto-generation.
 */

import {
  type CollectionMode,
  type CurrencyCode,
  type TransactionOrigin,
  type TransactionStatus,
} from '../../../enums/index.js';
import { type CustomData } from '../../../entities/index.js';
import {
  BillingDetailsNotification,
  TransactionCheckoutNotification,
  TransactionPaymentAttemptNotification,
} from '../shared/index.js';
import { TransactionsTimePeriodNotification } from './transactions-time-period-notification.js';
import { TransactionItemNotification } from './transaction-item-notification.js';
import { TransactionDetailsNotification } from './transaction-details-notification.js';
import { type ITransactionNotificationResponse } from '../../types/index.js';

export class TransactionNotification {
  public readonly id: string;
  public readonly status: TransactionStatus;
  public readonly customerId: string | null;
  public readonly addressId: string | null;
  public readonly businessId: string | null;
  public readonly customData: CustomData | null;
  public readonly currencyCode: CurrencyCode;
  public readonly origin: TransactionOrigin;
  public readonly subscriptionId: string | null;
  public readonly invoiceId: string | null;
  public readonly invoiceNumber: string | null;
  public readonly collectionMode: CollectionMode;
  public readonly discountId: string | null;
  public readonly billingDetails: BillingDetailsNotification | null;
  public readonly billingPeriod: TransactionsTimePeriodNotification | null;
  public readonly items: TransactionItemNotification[];
  public readonly details: TransactionDetailsNotification | null;
  public readonly payments: TransactionPaymentAttemptNotification[];
  public readonly checkout: TransactionCheckoutNotification | null;
  public readonly createdAt: string;
  public readonly updatedAt: string;
  public readonly billedAt: string | null;

  constructor(transaction: ITransactionNotificationResponse) {
    this.id = transaction.id;
    this.status = transaction.status;
    this.customerId = transaction.customer_id ? transaction.customer_id : null;
    this.addressId = transaction.address_id ? transaction.address_id : null;
    this.businessId = transaction.business_id ? transaction.business_id : null;
    this.customData = transaction.custom_data ? transaction.custom_data : null;
    this.currencyCode = transaction.currency_code;
    this.origin = transaction.origin;
    this.subscriptionId = transaction.subscription_id ? transaction.subscription_id : null;
    this.invoiceId = transaction.invoice_id ? transaction.invoice_id : null;
    this.invoiceNumber = transaction.invoice_number ? transaction.invoice_number : null;
    this.collectionMode = transaction.collection_mode;
    this.discountId = transaction.discount_id ? transaction.discount_id : null;
    this.billingDetails = transaction.billing_details
      ? new BillingDetailsNotification(transaction.billing_details)
      : null;
    this.billingPeriod = transaction.billing_period
      ? new TransactionsTimePeriodNotification(transaction.billing_period)
      : null;
    this.items = transaction.items.map((item) => new TransactionItemNotification(item));
    this.details = transaction.details ? new TransactionDetailsNotification(transaction.details) : null;
    this.payments = transaction.payments.map((payment) => new TransactionPaymentAttemptNotification(payment));
    this.checkout = transaction.checkout ? new TransactionCheckoutNotification(transaction.checkout) : null;
    this.createdAt = transaction.created_at;
    this.updatedAt = transaction.updated_at;
    this.billedAt = transaction.billed_at ? transaction.billed_at : null;
  }
}
